import numpy as np
import matplotlib.pyplot as plt
from scipy.linalg import solve

def lowess(x, y, f=0.25, iterations=3):
    n = len(x)
    r = int(np.ceil(f * n))
    h = np.partition(np.abs(x[:, None] - x), r, axis=1)[:, r]
    w = (1 - np.clip(np.abs((x[:, None] - x) / h[:, None]), 0, 1) ** 3) ** 3
    yest = np.zeros(n)

    for _ in range(iterations):
        for i in range(n):
            weights = w[:, i]
            X = np.stack((np.ones(n), x), axis=1)
            W = np.diag(weights)
            beta = solve(X.T @ W @ X, X.T @ W @ y)
            yest[i] = beta @ [1, x[i]]
        residuals = y - yest
        s = np.median(np.abs(residuals))
        delta = (1 - np.clip(residuals / (6 * s), -1, 1) ** 2) ** 2
        w *= delta[:, None]
    return yest

def main():
    x = np.linspace(0, 2 * np.pi, 100)
    y = np.sin(x) + 0.3 * np.random.randn(100)
    yest = lowess(x, y)
    plt.plot(x, y, "r.")
    plt.plot(x, yest, "b-")
    plt.show()

main()
